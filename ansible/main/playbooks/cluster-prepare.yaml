---
- name: Prepare System
  hosts: kubernetes
  remote_user: k3sadmin
  become: true
  gather_facts: true
  any_errors_fatal: true
  vars:
    cifs_uri: //10.90.100.1/kubeShare
    mount_point: "/mnt/kubeShare/"
    zsh_path: "/home/k3sadmin"
  vars_files:
    - ../../secrets/vaults/harbourside.yml
  pre_tasks:
    - name: Pausing for 2 seconds...
      ansible.builtin.pause:
        seconds: 2
  tasks:
    # - name: Locale
    #   block:
    #     - name: Locale | Set timezone
    #       community.general.timezone:
    #         name: "{{ timezone | default('Etc/UTC') }}"

    - name: Include packages task configuration.
      ansible.builtin.import_tasks:
        file: tasks/packages.yaml
      tags: ["packages"]

    - name: Include cifs task configuration.
      ansible.builtin.import_tasks:
        file: tasks/cifs.yaml
      tags: ["cifs"]

    # - name: User Configuration
    #   block:
    #     - name: User Configuration | SSH keys
    #       ansible.posix.authorized_key:
    #         user: "{{ ansible_user }}"
    #         key: "https://github.com/{{ github_username }}.keys"
    #     - name: User Configuration | Silence login
    #       ansible.builtin.file:
    #         dest: "{{ '/home/' + ansible_user if ansible_user != 'root' else '/root' }}/.hushlogin"
    #         state: touch
    #         owner: "{{ ansible_user }}"
    #         group: "{{ ansible_user }}"
    #         mode: "0644"
    #         modification_time: preserve
    #         access_time: preserve
    #     - name: User Configuration | Add user to sudoers
    #       when: ansible_user != 'root'
    #       ansible.builtin.copy:
    #         content: "{{ ansible_user }} ALL=(ALL:ALL) NOPASSWD:ALL"
    #         dest: "/etc/sudoers.d/{{ ansible_user }}"
    #         owner: root
    #         group: root
    #         mode: "0440"

    - name: Setup Shell
      block:
        - name: Include fonts task configuration.
          ansible.builtin.import_tasks:
            file: tasks/fonts.yaml
          tags: ["fonts"]

        - name: Include ZSH task configuration.
          ansible.builtin.import_tasks:
            file: tasks/zsh.yaml
          tags: ["zsh"]

  #   - name: System Configuration
  #     notify: Reboot
  #     block:
  #       - name: System Configuration | Disable apparmor
  #         ansible.builtin.systemd:
  #           name: apparmor
  #           state: stopped
  #           masked: true
  #       - name: System Configuration | Disable swap
  #         ansible.posix.mount:
  #           name: "{{ item }}"
  #           fstype: swap
  #           state: absent
  #         loop: ["none", "swap"]
  #       - name: System Configuration | Create Kernel modules
  #         ansible.builtin.copy:
  #           dest: "/etc/modules-load.d/{{ item }}.conf"
  #           mode: "0644"
  #           content: "{{ item }}"
  #         loop: ["br_netfilter", "ceph", "ip_vs", "ip_vs_rr", "nbd", "overlay", "rbd", "tcp_bbr"]
  #         register: modules_status
  #       - name: System Configuration | Reload Kernel modules # noqa: no-changed-when no-handler
  #         when: modules_status.changed
  #         ansible.builtin.systemd:
  #           name: systemd-modules-load
  #           state: restarted
  #       - name: System Configuration | Sysctl
  #         ansible.posix.sysctl:
  #           name: "{{ item.key }}"
  #           value: "{{ item.value }}"
  #           sysctl_file: /etc/sysctl.d/99-kubernetes.conf
  #           reload: true
  #         with_dict: "{{ sysctl_config }}"
  #         vars:
  #           sysctl_config:
  #             fs.inotify.max_queued_events: 65536
  #             fs.inotify.max_user_watches: 524288
  #             fs.inotify.max_user_instances: 8192
  #       - name: System Configuration | Grub (1)
  #         ansible.builtin.replace:
  #           path: /etc/default/grub
  #           regexp: '^(GRUB_CMDLINE_LINUX=(?:(?![" ]{{ item.key | regex_escape }}=).)*)(?:[" ]{{ item.key | regex_escape }}=\S+)?(.*")$'
  #           replace: '\1 {{ item.key }}={{ item.value }}\2'
  #         with_dict: "{{ grub_config }}"
  #         vars:
  #           grub_config:
  #             apparmor: "0"
  #             mitigations: "off"
  #         register: grub_status
  #       - name: System Configuration | Grub (2) # noqa: no-changed-when no-handler
  #         when: grub_status.changed
  #         ansible.builtin.command: update-grub

  # handlers:
  #   - name: Reboot
  #     ansible.builtin.reboot:
  #       msg: Rebooting nodes
  #       reboot_timeout: 3600
